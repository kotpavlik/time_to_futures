import { Injectable, OnModuleInit } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import TelegramBot = require('node-telegram-bot-api');
import { AI_User } from 'src/db/user/user.model';

@Injectable()
export class BotService implements OnModuleInit {
    private bot: TelegramBot; // –î–µ–ª–∞–µ–º bot —Å–≤–æ–π—Å—Ç–≤–æ–º –∫–ª–∞—Å—Å–∞

    constructor(@InjectModel(AI_User.name) private AI_UserBD: Model<AI_User>) { }

    async onModuleInit() {
        this.bot = new TelegramBot(process.env.TG_BOT_TOKEN, { polling: true }); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º bot
        this.botMessage(); // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    }

    async botMessage() {
        this.bot.on('message', async (msg) => {
            try {
                if (msg.text == '/start') {
                    await this.bot.sendMessage(
                        msg.chat.id,
                        `<b> –ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name ? msg.from.first_name : msg.from.username} üëæ </b> \n –ñ–º–∏ <b>GO</b>  üöÄ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–ª–∏ –∂–º–∏ <b>PLAY</b>`,
                        {
                            parse_mode: 'HTML',
                            disable_web_page_preview: true,
                            reply_markup: {
                                inline_keyboard: [
                                    [
                                        {
                                            text: 'Play',
                                            web_app: {
                                                url: 'https://time-to-futures-tma.vercel.app',
                                            },
                                        },
                                    ],
                                ],
                            },
                        },
                    );
                }
                if (msg.text == '/dev') {
                    await this.bot.sendMessage(
                        msg.chat.id,
                        `<b>–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</b> \n –ù–∞–∂–º–∏—Ç–µ <b>DEV</b> –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä.`,
                        {
                            parse_mode: 'HTML',
                            disable_web_page_preview: true,
                            reply_markup: {
                                inline_keyboard: [
                                    [
                                        {
                                            text: 'DEV',
                                            web_app: {
                                                url: 'https://time-to-futures.ru.tuna.am',
                                            },
                                        },
                                    ],
                                ],
                            },
                        },
                    );
                }
            } catch (error) {
                console.log(error);
            }
        });
    }

    async sendWelcomeMessage(userId: number, refParam: string) {
        try {
            await this.bot.sendMessage(
                userId,
                `<b>–ü—Ä–∏–≤–µ—Ç! üëæ</b> \n –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: ${refParam}. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ! üöÄ`,
                {
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                },
            );
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }
}